From fa8d92d980f03834162bebcf4cde828c751ef4e7 Mon Sep 17 00:00:00 2001
From: Pavel Yaskevich <xedin@apache.org>
Date: Mon, 2 Nov 2015 17:05:34 -0800
Subject: [PATCH 09/10] optimize IntervalTree lookups via binary search

---
 .../org/apache/cassandra/utils/IntervalTree.java   | 40 +++++++++++++++++-----
 1 file changed, 31 insertions(+), 9 deletions(-)

diff --git a/src/java/org/apache/cassandra/utils/IntervalTree.java b/src/java/org/apache/cassandra/utils/IntervalTree.java
index 2b81516..0682fa2 100644
--- a/src/java/org/apache/cassandra/utils/IntervalTree.java
+++ b/src/java/org/apache/cassandra/utils/IntervalTree.java
@@ -309,28 +309,50 @@ public class IntervalTree<C, D, I extends Interval<C, D>> implements Iterable<I>
             {
                 // Adds intervals i in intersects right as long as i.max >= searchInterval.min
                 // then search right
-                for (Interval<C, D> interval : intersectsRight)
+                int low = 0;
+                int high = intersectsRight.size() - 1;
+                while (low <= high)
                 {
-                    if (comparePoints(interval.max, searchInterval.min) >= 0)
-                        results.add(interval.data);
+                    int middle = low + (high - low) / 2;
+                    Interval<C, D> middleInterval = intersectsRight.get(middle);
+                    if (comparePoints(middleInterval.max, searchInterval.min) >= 0)
+                    {
+                        for (int i = low; i <= middle; i++)
+                            results.add(intersectsRight.get(i).data);
+                        low = middle + 1;
+                    }
                     else
-                        break;
+                    {
+                        high = middle - 1;
+                    }
                 }
+
                 if (right != null)
                     right.searchInternal(searchInterval, results);
             }
             else
             {
                 assert comparePoints(center, searchInterval.max) > 0;
-                // Adds intervals i in intersects left as long as i.min >= searchInterval.max
+                // Adds intervals i in intersects left as long as i.min <= searchInterval.max
                 // then search left
-                for (Interval<C, D> interval : intersectsLeft)
+                int low = 0;
+                int high = intersectsLeft.size() - 1;
+                while (low <= high)
                 {
-                    if (comparePoints(interval.min, searchInterval.max) <= 0)
-                        results.add(interval.data);
+                    int middle = low + (high - low) / 2;
+                    Interval<C, D> middleInterval = intersectsLeft.get(middle);
+                    if (comparePoints(middleInterval.min, searchInterval.max) <= 0)
+                    {
+                        for (int i = low; i <= middle; i++)
+                            results.add(intersectsLeft.get(i).data);
+                        low = middle + 1;
+                    }
                     else
-                        break;
+                    {
+                        high = middle - 1;
+                    }
                 }
+
                 if (left != null)
                     left.searchInternal(searchInterval, results);
             }
-- 
2.6.0

