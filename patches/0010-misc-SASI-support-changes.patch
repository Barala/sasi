From a7d142841e1523c1cdd18ffb2b7f6a2549c4680f Mon Sep 17 00:00:00 2001
From: Pavel Yaskevich <xedin@apache.org>
Date: Mon, 2 Nov 2015 17:08:01 -0800
Subject: [PATCH 10/10] misc SASI support changes

---
 src/java/org/apache/cassandra/db/DataTracker.java  |  7 ++-
 .../cassandra/io/util/RandomAccessReader.java      |  2 +-
 .../apache/cassandra/io/util/SequentialWriter.java |  9 ++-
 .../cassandra/utils/ByteBufferDataInput.java       | 70 ++++++++++++++++++++++
 .../cassandra/utils/ByteBufferDataOutput.java      | 67 +++++++++++++++++++++
 .../org/apache/cassandra/utils/ByteBufferUtil.java | 34 +++++++++++
 src/java/org/apache/cassandra/utils/CLibrary.java  | 20 +++++--
 .../org/apache/cassandra/utils/FBUtilities.java    |  5 ++
 test/conf/cassandra-murmur.yaml                    | 37 ++++++++++++
 9 files changed, 240 insertions(+), 11 deletions(-)
 create mode 100644 src/java/org/apache/cassandra/utils/ByteBufferDataInput.java
 create mode 100644 src/java/org/apache/cassandra/utils/ByteBufferDataOutput.java
 create mode 100644 test/conf/cassandra-murmur.yaml

diff --git a/src/java/org/apache/cassandra/db/DataTracker.java b/src/java/org/apache/cassandra/db/DataTracker.java
index e961b77..aef338b 100644
--- a/src/java/org/apache/cassandra/db/DataTracker.java
+++ b/src/java/org/apache/cassandra/db/DataTracker.java
@@ -120,6 +120,7 @@ public class DataTracker
         }
         while (!view.compareAndSet(currentView, newView));
 
+        notifyRenewed(toFlushMemtable);
         return toFlushMemtable;
     }
 
@@ -509,7 +510,7 @@ public class DataTracker
     {
         private static final SSTableIntervalTree EMPTY = new SSTableIntervalTree(null);
 
-        private SSTableIntervalTree(Collection<Interval<RowPosition, SSTableReader>> intervals)
+        public SSTableIntervalTree(Collection<Interval<RowPosition, SSTableReader>> intervals)
         {
             super(intervals, null);
         }
@@ -525,7 +526,7 @@ public class DataTracker
      * flush, the sstables for a column family, and the sstables that are active
      * in compaction (a subset of the sstables).
      */
-    static class View
+    public static class View
     {
         public final Memtable memtable;
         public final Set<Memtable> memtablesPendingFlush;
@@ -533,7 +534,7 @@ public class DataTracker
         public final Set<SSTableReader> sstables;
         public final SSTableIntervalTree intervalTree;
 
-        View(Memtable memtable, Set<Memtable> pendingFlush, Set<SSTableReader> sstables, Set<SSTableReader> compacting, SSTableIntervalTree intervalTree)
+        public View(Memtable memtable, Set<Memtable> pendingFlush, Set<SSTableReader> sstables, Set<SSTableReader> compacting, SSTableIntervalTree intervalTree)
         {
             assert memtable != null;
             assert pendingFlush != null;
diff --git a/src/java/org/apache/cassandra/io/util/RandomAccessReader.java b/src/java/org/apache/cassandra/io/util/RandomAccessReader.java
index 09ecac0..94ee993 100644
--- a/src/java/org/apache/cassandra/io/util/RandomAccessReader.java
+++ b/src/java/org/apache/cassandra/io/util/RandomAccessReader.java
@@ -91,7 +91,7 @@ public class RandomAccessReader extends RandomAccessFile implements FileDataInpu
     }
 
     @VisibleForTesting
-    static RandomAccessReader open(File file, int bufferSize, PoolingSegmentedFile owner)
+    public static RandomAccessReader open(File file, int bufferSize, PoolingSegmentedFile owner)
     {
         try
         {
diff --git a/src/java/org/apache/cassandra/io/util/SequentialWriter.java b/src/java/org/apache/cassandra/io/util/SequentialWriter.java
index b980cf1..11cb563 100644
--- a/src/java/org/apache/cassandra/io/util/SequentialWriter.java
+++ b/src/java/org/apache/cassandra/io/util/SequentialWriter.java
@@ -32,7 +32,7 @@ import org.apache.cassandra.utils.CLibrary;
  * Adds buffering, mark, and fsyncing to OutputStream.  We always fsync on close; we may also
  * fsync incrementally if Config.trickle_fsync is enabled.
  */
-public class SequentialWriter extends OutputStream
+public class SequentialWriter extends AbstractDataOutput
 {
     private static final Logger logger = LoggerFactory.getLogger(SequentialWriter.class);
 
@@ -169,6 +169,13 @@ public class SequentialWriter extends OutputStream
         return toCopy;
     }
 
+    public void skipBytes(int numBytes) throws IOException
+    {
+        flush();
+        out.seek(out.getFilePointer() + numBytes);
+        current = bufferOffset = out.getFilePointer();
+    }
+
     /**
      * Synchronize file contents with disk.
      */
diff --git a/src/java/org/apache/cassandra/utils/ByteBufferDataInput.java b/src/java/org/apache/cassandra/utils/ByteBufferDataInput.java
new file mode 100644
index 0000000..dcbe6fc
--- /dev/null
+++ b/src/java/org/apache/cassandra/utils/ByteBufferDataInput.java
@@ -0,0 +1,70 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.utils;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.apache.cassandra.io.util.AbstractDataInput;
+
+public class ByteBufferDataInput extends AbstractDataInput
+{
+    private final ByteBuffer buffer;
+
+    public ByteBufferDataInput(ByteBuffer buffer)
+    {
+        this.buffer = buffer;
+    }
+
+    @Override
+    protected void seekInternal(int position)
+    {
+        buffer.position(position);
+    }
+
+    @Override
+    protected int getPosition()
+    {
+        return buffer.position();
+    }
+
+    @Override
+    public int skipBytes(int n) throws IOException
+    {
+        int len = Math.min(buffer.remaining(), buffer.position() + n);
+        buffer.position(len);
+        return len;
+    }
+
+    @Override
+    public int read() throws IOException
+    {
+        return buffer.hasRemaining() ? buffer.get() & 0xff : -1;
+    }
+
+    @Override
+    public int read(byte[] bytes, int off, int len) throws IOException
+    {
+        if (!buffer.hasRemaining())
+            return -1;
+
+        len = Math.min(len, buffer.remaining());
+        buffer.get(bytes, off, len);
+        return len;
+    }
+}
diff --git a/src/java/org/apache/cassandra/utils/ByteBufferDataOutput.java b/src/java/org/apache/cassandra/utils/ByteBufferDataOutput.java
new file mode 100644
index 0000000..3bac68e
--- /dev/null
+++ b/src/java/org/apache/cassandra/utils/ByteBufferDataOutput.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.cassandra.utils;
+
+import java.io.DataOutput;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import org.apache.cassandra.io.util.AbstractDataOutput;
+
+public class ByteBufferDataOutput extends AbstractDataOutput
+{
+    protected final ByteBuffer buffer;
+
+    public ByteBufferDataOutput(ByteBuffer buffer)
+    {
+        this.buffer = buffer;
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int count) throws IOException
+    {
+        this.buffer.put(buffer, offset, count);
+    }
+
+    @Override
+    public void write(int oneByte) throws IOException
+    {
+        this.buffer.put((byte) oneByte);
+    }
+
+    public int position()
+    {
+        return buffer.position();
+    }
+
+    public int capacity()
+    {
+        return buffer.capacity();
+    }
+
+    public void writeFullyTo(DataOutput out) throws IOException
+    {
+        buffer.flip();
+        ByteBufferUtil.write(buffer, out);
+    }
+
+    public void clear()
+    {
+        buffer.clear();
+    }
+}
\ No newline at end of file
diff --git a/src/java/org/apache/cassandra/utils/ByteBufferUtil.java b/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
index 4970fe6..640055e 100644
--- a/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
+++ b/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
@@ -553,6 +553,40 @@ public class ByteBufferUtil
         return prefix.equals(value.duplicate().limit(value.remaining() - diff));
     }
 
+    public static boolean contains(ByteBuffer buffer, ByteBuffer subBuffer)
+    {
+        int len = subBuffer.remaining();
+        if (buffer.remaining() - len < 0)
+            return false;
+
+        // adapted form the JDK's String.indexOf()
+        byte first = subBuffer.get(subBuffer.position());
+        int max = buffer.position() + (buffer.remaining() - len);
+
+        for (int i = buffer.position(); i <= max; i++)
+        {
+            /* Look for first character. */
+            if (buffer.get(i) != first)
+            {
+                while (++i <= max && buffer.get(i) != first)
+                {}
+           }
+
+            /* (maybe) Found first character, now look at the rest of v2 */
+            if (i <= max)
+            {
+                int j = i + 1;
+                int end = j + len - 1;
+                for (int k = 1 + subBuffer.position(); j < end && buffer.get(j) == subBuffer.get(k); j++, k++)
+                {}
+
+                if (j == end)
+                    return true;
+            }
+        }
+        return false;
+    }
+
     /** trims size of bytebuffer to exactly number of bytes in it, to do not hold too much memory */
     public static ByteBuffer minimalBufferFor(ByteBuffer buf)
     {
diff --git a/src/java/org/apache/cassandra/utils/CLibrary.java b/src/java/org/apache/cassandra/utils/CLibrary.java
index 6711098..47cb2fd 100644
--- a/src/java/org/apache/cassandra/utils/CLibrary.java
+++ b/src/java/org/apache/cassandra/utils/CLibrary.java
@@ -20,12 +20,10 @@ package org.apache.cassandra.utils;
 import java.io.FileDescriptor;
 import java.lang.reflect.Field;
 
+import com.sun.jna.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.sun.jna.LastErrorException;
-import com.sun.jna.Native;
-
 public final class CLibrary
 {
     private static final Logger logger = LoggerFactory.getLogger(CLibrary.class);
@@ -79,13 +77,17 @@ public final class CLibrary
     // fcntl - manipulate file descriptor, `man 2 fcntl`
     public static native int fcntl(int fd, int command, long flags) throws LastErrorException;
 
-    // fadvice
-    public static native int posix_fadvise(int fd, long offset, int len, int flag) throws LastErrorException;
-
     public static native int open(String path, int flags) throws LastErrorException;
     public static native int fsync(int fd) throws LastErrorException;
     public static native int close(int fd) throws LastErrorException;
 
+    // fadvice
+    public static int posix_fadvise(int fd, long offset, int len, int flag)
+    {
+        Function fadvise = NativeLibrary.getInstance("c").getFunction("posix_fadvise");
+        return fadvise == null ? -1 : fadvise.invokeInt(new Object[] { fd, offset, len, flag });
+    }
+
     private static int errno(RuntimeException e)
     {
         assert e instanceof LastErrorException;
@@ -114,6 +116,12 @@ public final class CLibrary
 
     public static void tryMlockall()
     {
+        if (!Boolean.valueOf(System.getProperty("cassandra.mlockall", "false")))
+        {
+            logger.info("mlockall is disabled.");
+            return;
+        }
+
         try
         {
             mlockall(MCL_CURRENT);
diff --git a/src/java/org/apache/cassandra/utils/FBUtilities.java b/src/java/org/apache/cassandra/utils/FBUtilities.java
index 9f09868..60abdd5 100644
--- a/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -695,4 +695,9 @@ public class FBUtilities
     {
         return OPERATING_SYSTEM.contains("nix") || OPERATING_SYSTEM.contains("nux") || OPERATING_SYSTEM.contains("aix");
     }
+
+    public static long align(long val, int boundary)
+    {
+        return (val + boundary) & ~(boundary - 1);
+    }
 }
diff --git a/test/conf/cassandra-murmur.yaml b/test/conf/cassandra-murmur.yaml
new file mode 100644
index 0000000..58d3ed5
--- /dev/null
+++ b/test/conf/cassandra-murmur.yaml
@@ -0,0 +1,37 @@
+#
+# Warning!
+# Consider the effects on 'o.a.c.i.s.LegacySSTableTest' before changing schemas in this file.
+#
+cluster_name: Test Cluster
+in_memory_compaction_limit_in_mb: 1
+commitlog_sync: batch
+commitlog_sync_batch_window_in_ms: 1.0
+commitlog_segment_size_in_mb: 1
+partitioner: org.apache.cassandra.dht.Murmur3Partitioner
+listen_address: 127.0.0.1
+storage_port: 7010
+rpc_port: 9170
+column_index_size_in_kb: 4
+commitlog_directory: build/test/cassandra/commitlog
+saved_caches_directory: build/test/cassandra/saved_caches
+data_file_directories:
+    - build/test/cassandra/data
+disk_access_mode: mmap
+seed_provider:
+    - class_name: org.apache.cassandra.locator.SimpleSeedProvider
+      parameters:
+          - seeds: "127.0.0.1"
+endpoint_snitch: org.apache.cassandra.locator.SimpleSnitch
+dynamic_snitch: true
+request_scheduler: org.apache.cassandra.scheduler.RoundRobinScheduler
+request_scheduler_id: keyspace
+server_encryption_options:
+    internode_encryption: none
+    keystore: conf/.keystore
+    keystore_password: cassandra
+    truststore: conf/.truststore
+    truststore_password: cassandra
+incremental_backups: true
+compaction_throughput_mb_per_sec: 0
+start_native_transport: true
+native_transport_port: 9052
-- 
2.6.0

